<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- =======================================================================

     ANT BUILD FILE (Ref. http://jakarta.apache.org/ant )

     Ant script for generating a J2SE 1.4 profile of GeoAPI interfaces.
     This script is invoked by Maven 2 and should not need to be invoked
     directly. The following properties should be set by Maven 2:

     source.directory              The source directory in the module that
                                   contains J2SE 1.5 code.

     generated.source.directory    The target directory for generated sources.
     ======================================================================= -->

<project default="transform">
    <description>
        Generates a J2SE 1.4 profile of GeoAPI interfaces. This Ant script is run
        by Maven 2 and should not need to be invoked directly. This Ant script do
        not compile the source; compilation is performed by Maven 2 after sources
        generation.
    </description>

    <!-- The main target -->
    <target name="transform">
        <mkdir dir="${generatedSourceDirectory}" />

        <!-- Copy over the files -->
        <copy todir="${generatedSourceDirectory}" overwrite="true">
            <fileset dir="${sourceDirectory}">
                <include name="org/opengis/**/*.png" />
                <include name="org/opengis/**/*.xml" />
                <include name="org/opengis/**/*.html" />
                <include name="org/opengis/**/*.java" />
                <include name="org/opengis/**/*.properties" />
                <exclude name="org/opengis/annotation/**" />
            </fileset>
        </copy>

        <!-- Comment out annotations -->
        <replace dir="${generatedSourceDirectory}" includes="**/*.java">
            <replacefilter token="@Override" value="//@Override" />
            <replacefilter token="@UML" value="//@UML" />
            <replacefilter token="@Profile" value="//@Profile" />
            <replacefilter token="@Association" value="//@Association" />
            <replacefilter token="@Extension" value="//@Extension" />
            <replacefilter token="@Deprecated" value="//@Deprecated" />
            <replacefilter token="@XmlSchema" value="//@XmlSchema" />
            <replacefilter token="@XmlElement" value="//@XmlElement" />
            <replacefilter token="import static" value="//import static" />
            <replacefilter token="import org.opengis.annotation" value="//import org.opengis.annotation" />
        </replace>


        <!-- ===================================================================
             ERASE GENERIC TYPES

             We perform many passes with the same regular expression in order
             to resolve nested generic types. Each pass resolve only one level.
             It would have been possible to create a more complicated regular
             expression with < and > symbols included, but experience suggests
             that it leads to confusing results requirying explicit handling
             for many special cases.
             =================================================================== -->

        <!-- NOTE: we should not copy the same block of code many times! But Ant
             doesn't support loops,  and I have been unable to get <antcall/> to
             work (it tries to locate a build.xml file;  it doesn't seem to look
             in the current xml file, even if Apache's doc said that it does). -->

        <!-- PROBLEM: this script erases javadoc html tags such as <p>, <ul>
             and <li>, if anyone can help untangle it would be good.           -->

        <!-- Erase generic types (first pass) -->
        <replaceregexp byline="true">
            <fileset dir="${generatedSourceDirectory}" includes="**/*.java" />
            <regexp pattern="(\s*[^\*].*)&lt;[\w|\s|\?|\[|\]|\,]+&gt;" />
            <substitution expression="\1" />
        </replaceregexp>

        <!-- Erase generic types (second pass) -->
        <replaceregexp byline="true">
            <fileset dir="${generatedSourceDirectory}" includes="**/*.java" />
            <regexp pattern="(\s*[^\*].*)&lt;[\w|\s|\?|\[|\]|\,]+&gt;" />
            <substitution expression="\1" />
        </replaceregexp>

        <!-- Erase generic types (third pass) -->
        <replaceregexp byline="true">
            <fileset dir="${generatedSourceDirectory}" includes="**/*.java" />
            <regexp pattern="(\s*[^\*].*)&lt;[\w|\s|\?|\[|\]|\,]+&gt;" />
            <substitution expression="\1" />
        </replaceregexp>

        <!-- Erase generic types (fourth pass) -->
        <replaceregexp byline="true">
            <fileset dir="${generatedSourceDirectory}" includes="**/*.java" />
            <regexp pattern="(\s*[^\*].*)&lt;[\w|\s|\?|\[|\]|\,]+&gt;" />
            <substitution expression="\1" />
        </replaceregexp>




        <!-- 0. Some special cases, done file by file the good old fashioned way -->
        <!-- org.opengis.util -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/util/CodeList.java">
            <replacefilter token="(E)" />
            <replacefilter token="final E " value="final Object " />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/parameter/Parameter*.java">
            <replacefilter token=" T " value=" Object " />
            <replacefilter token="(T " value="(Object " />
        </replace>

        <!-- org.opengis.feature.type (naming) -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/Namespace.java">
            <replacefilter token="N lookup(" value="Name lookup(" />
        </replace>

        <!-- ===================================================================
             Feature Model
             =================================================================== -->

        <!-- Note: In general we will comment out any subclass that performs type
             narrowing. This will force Java 1.4 code to explicitly cast.
        
             Rather than comment out these methods we have chosen to leave them
             in (returning the same value as specified by their parent). This
             enables the javadocs to be made avaialble under Java 1.4, the
             javadocs being important in this case as they indicate what value
             to cast to.
        
             An exception has been made in a few cases where an "abstract" idea
             such as Property is represented, in these cases the concrete having
             a concrete return value in a subclass has been given precendence
             over polymorphism.                                                  -->

        <!-- org.opengis.feature -->

        <!-- property: remove some entries that are "narrowed" later" -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/PropertyType.java">
            <replacefilter token="PropertyType getSuper()" value="//PropertyType getSuper()" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/Property.java">
            <replacefilter token="PropertyType getType()" value="//PropertyType getType()" />
            <replacefilter token="PropertyDescriptor getDescriptor()" value="//PropertyDescriptor getDescriptor()" />
        </replace>

        <!-- operation -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/OperationType.java">
            <replacefilter token="T getTarget()" value="OperationType getTarget()" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/OperationDescriptor.java">
            <replacefilter token="O getType()" value="OperationType/*O*/ getType()" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/Operation.java">
            <replacefilter token="OperationType getType()" value="//OperationType getType()" />
        </replace>

        <!-- Association: structural property -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/AssociationType.java">
            <replacefilter token="B getReferenceType()" value="AttributeType getReferenceType()" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/AssociationDescriptor.java">
            <replacefilter token="AssociationType getType()" value="//AssociationType getType()" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/Association.java">
            <replacefilter token="T getType()" value="AssociationType getType()" />
            <replacefilter token="A getRelatedType()" value="AttributeType getRelatedType()" />
            <replacefilter token="Attribute getValue()" value="//Attribute getValue()" />
        </replace>

        <!-- Attribute: structural property -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/AttributeDescriptor.java">
            <replacefilter token="AttributeType getType()" value="//AttributeType getType()"/>
        </replace>

        <!-- Attribute: structural property -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/GeometryDescriptor.java">
            <replacefilter token="GeometryType getType()" value="//GeometryType getType()"/>
        </replace>

        <!-- ComplexAttribute -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/ComplexAttribute.java">
            <replacefilter token="ComplexType getType()" value="org.opengis.feature.type.AttributeType/*ComplexType*/ getType();" />
            <replacefilter token="Collection getValue();" value="Object/*Collection*/ getValue();" />
            <replacefilter token="void setValue(Collection " value="void setValue(Object/*Collection*/" />
        </replace>

        <!-- Feature  -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/Feature.java">
            <replacefilter token="FeatureType getType()" value="org.opengis.feature.type.AttributeType/*FeatureType*/ getType();" />
            <replacefilter token="//import org.opengis.feature.type.AttributeType;" value="import org.opengis.feature.type.AttributeType;" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/FeatureType.java">
            <replacefilter token="ComplexType getSuper();" value="//ComplexType getSuper();" />
        </replace>

        <!-- "Type Narrowed" Attributes -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/GeometryAttribute.java">
            <replacefilter token="GeometryType getType()" value="org.opengis.feature.type.AttributeType getType()" />
            <replacefilter token="GeometryDescriptor getDescriptor()" value="//GeometryDescriptor getDescriptor()"/>
        </replace>
        <!-- Simple "Type Narrowed" Attributes -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/BooleanAttribute.java">
            <replacefilter token="Boolean getValue();" value="Object/*Boolean*/ getValue();" />
            <replacefilter token="void setValue(Boolean " value="void setValue(Object/*Boolean*/" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/NumericAttribute.java">
            <replacefilter token="Number getValue();" value="Object/*Number*/ getValue();" />
            <replacefilter token="void setValue(Number " value="void setValue(Object/*Number*/" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/TextAttribute.java">
            <replacefilter token="CharSequence getValue();" value="Object/*CharSequence*/ getValue();" />
            <replacefilter token="void setValue(CharSequence " value="void setValue(Object/*CharSequence*/" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/BoundingBoxAttribute.java">
            <replacefilter token="BoundingBox getValue();" value="Object/*Date*/ getValue();" />
            <replacefilter token="void setValue(BoundingBox " value="void setValue(Object/*Date*/" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/TemporalAttribute.java">
            <replacefilter token="Date getValue();" value="Object/*BoundingBox*/ getValue();" />
            <replacefilter token="void setValue(Date " value="void setValue(Object/*BoundingBox*/" />
        </replace>
        <!-- FeatureCollection -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/FeatureCollection.java">
            <replacefilter token="FeatureCollectionType getType();" value="AttributeType getType();" />
            <replacefilter token="//import org.opengis.feature.type.AttributeType;" value="import org.opengis.feature.type.AttributeType;" />
        </replace>

        <!-- org.opengis.feature.simple -->

        <!--replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/SimpleFeatureCollectionType.java">
            <replacefilter token="Set getMembers()" value="FeatureType getMemberType()" />
        </replace-->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/SimpleFeature.java">
            <replacefilter token="SimpleFeatureType getType();" value="org.opengis.feature.type.AttributeType/*SimpleFeatureType*/ getType();" />
            <replacefilter token="List associations();" value="Collection/*List*/ associations();" />
            <replacefilter token="List attributes();" value="Collection/*List*/ attributes();" />
            <replacefilter token="List getValue();" value="Object/*List*/ getValue();" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/SimpleFeatureType.java">
            <replacefilter token="//import org.opengis.feature.type.AttributeType;" value="import org.opengis.feature.type.AttributeType;" />
            <replacefilter token="//import java.util.Collection;" value="import java.util.Collection;" />
            <replacefilter token="SimpleFeatureType getSuper();" value="AttributeType/*SimpleFeatureType*/ getSuper();" />
            <replacefilter token="List getProperties();" value="Collection/*List*/ getProperties();" />
            <replacefilter token="List associations();" value="Collection/*List*/ associations();" />
            <replacefilter token="List attributes();" value="Collection/*List*/ attributes();" />
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/SimpleFeatureCollection.java">
            <replacefilter token="//import org.opengis.feature.type.AttributeType;" value="import org.opengis.feature.type.AttributeType;" />
            <replacefilter token="SimpleFeatureCollectionType getSuper();" value="AttributeType/*SimpleFeatureCollectionType*/ getSuper();" />
            <replacefilter token="SimpleFeatureCollectionType getType();" value="AttributeType/*SimpleFeatureCollectionType*/ getType();" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/SimpleFeatureCollection.java">
            <replacefilter token="SimpleFeatureCollectionType getType()" value="AttributeType/*SimpleFeatureCollectionType*/ getType()" />
            <replacefilter token="SimpleFeatureType getMemberType()" value="FeatureType getMemberType()" />
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/simple/SimpleTypeFactory.java">
            <replacefilter token="SimpleFeatureType createFeatureType(" value="FeatureType createFeatureType(" />
            <replacefilter token="SimpleFeatureCollectionType createFeatureCollectionType(" value="FeatureCollectionType createFeatureCollectionType(" />
        </replace>

        <!-- org.opengis.feature.xml -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/xml/SequenceType.java">
            <replacefilter token="//import java.util.Collection;" value="import java.util.Collection;" />
            
            <replacefilter token="List attributes()" value="Collection/*List*/ attributes()" />
            <replacefilter token="List associations()" value="Collection/*List*/ associations()" />
            <replacefilter token="List getProperties()" value="Collection/*List*/ getProperties()" />           
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/xml/Sequence.java">
            <replacefilter token="//import java.util.Collection;" value="import java.util.Collection;" />

            <replacefilter token="SequenceType getType();" value="AttributeType/*SequenceType*/ getType();" />
            <replacefilter token="List getValue()" value="Object/*List*/ getValue()" />
            <replacefilter token="List attributes()" value="Collection/*List*/ attributes()" />
            <replacefilter token="List associations()" value="Collection/*List*/ associations()" />
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/xml/ChoiceType.java">
            <replacefilter token="//import java.util.Collection;" value="import java.util.Collection;" />
            
            <replacefilter token="Set attributes()" value="Collection/*Set*/ attributes()" />
            <replacefilter token="Set associations()" value="Collection/*Set*/ associations()" />           
            <replacefilter token="Set getProperties();" value="Collection/*Set*/ getProperties();" />           
        </replace>
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/xml/Choice.java">
            <replacefilter token="//import java.util.Collection;" value="import java.util.Collection;" />
            <replacefilter token="//import org.opengis.feature.type.AttributeType;" value="import org.opengis.feature.type.AttributeType;" />
            
            <replacefilter token="ChoiceType getType();" value="AttributeType/*ChoiceType*/ getType();" />
            <replacefilter token="Set getValue()" value="Object/*Set*/ getValue()" />
            <replacefilter token="setValue(Set" value="setValue(Object/*Set*/" />
            <replacefilter token="Set attributes()" value="Collection/*Set*/ attributes()" />
            <replacefilter token="Set associations()" value="Collection/*Set*/ associations()" />
        </replace>

        <!-- ===================================================================
             Feature Model Infrastructure
             ===================================================================
         schema, naming, factory, creation, utilitiy etc...
        -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/**/*.java">
            <replacefilter token="//import org.opengis.feature." value="import org.opengis.feature." />
            <replacefilter token="//import java.util." value="import java.util." />
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/TypeFactory.java">
            <replacefilter token="T type" value="AttributeType type" />
            <replacefilter token="A type" value="AssociationType type" />
            <replacefilter token="O type" value="OperationType type" />
        </replace>


        <replace dir="${generatedSourceDirectory}" includes="org/opengis/feature/type/Schema.java">
            <replacefilter token="Namespace keySet" value="Set keySet" />
        </replace>

        <!-- ===================================================================
                    Filter / Expression
          =================================================================== -->
        <replace dir="${generatedSourceDirectory}" includes="org/opengis/filter/identity/Identifier.java">
            <replacefilter token="T getID();" value="//T getID();" />
            <replacefilter token="O object" value="Object object" />
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/filter/identity/GmlObjectId.java">
            <replacefilter token="O object" value="Object object" />
        </replace>

        <replace dir="${generatedSourceDirectory}" includes="org/opengis/filter/expression/Expression.java,org/opengis/filter/expression/NilExpression.java">
            <replacefilter token="T evaluate(" value="Object evaluate(" />
        </replace>

    </target>
</project>
